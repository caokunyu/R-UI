export default [
  {
    type: 'section',
    content: `
# 概要

## R-UI 的目标
这个项目主要是用于我个人对于过去两年年做的几个项目的 React 相关技术总结，并且，通过整个库的开发过程以及这个网站的内容都是从浅入深的教材式的。通过这个 UI 库，了解 R-UI 的开发过程，从而学会如何使用 React，如何创建 React 组件。并避开在 React 开发过程中所需要面临的各种问题。

## 为什么是 React？
前端框架目前是 Angular，React(+Redux)，Vue(+Vuex) 三分天下。他们都是非常出色的前端框架，都可以用于解决目前前端技术上绝大多数问题，其实不必纠结哪个好，哪个框架能给你带来的开发体验最好，就用哪个。三个框架我都用过，但是最终还是最喜欢 React。我只列出我喜欢 React 的理由：

- 不再需要我们去关心那该死的 Dom 操作，这基本上是选择三大框架的主要原因
- 官方提供脚手架用于支持 React 项目的初期创建 (create-react-app)，集成非常丰富的开发工具，开发体验可以说是三大框架中最好的，可以在 Chrome 中直接调试 React 源码(在这方，Vue的开发体验是最差的，无法在浏览器中直接调试代码。可见社区规模的大小有多重要。)
- 只要会 JS(ES6/ES7) 即可使用，JSX 的就和普通模版技术差不多。可以说 React 没有什么额外学习成本
- 贴近传统 Client-side 开发体验，我比较喜欢这种开发方式
- React 的开发文档总是在教大家如何写出更合理，更易于维护的代码 (best practice)。并且告诉你什么是不好的代码 (bad practice)
- FB这种大公司负责开发和维护，并且有最庞大的前端社区支持。无需担心后续问题
- 升级友好。版本升级几乎不会带来任何问题
- 需要掌握的 Api 非常少。上手快
- 性能出色，虽然有性能更好的框架比如 Vue，但是，在过去的工作经验告诉我，真正影响性能的地方往往是实现业务的逻辑。框架带来的性能影响，大多数情况下微乎其微 (除了 Angularjs)
- 虽然 Github 中 Star 数量和 Vue 差距越来越小，但是从 Npmjs 的下载统计中。React 的日均下载数量是 Angular/Vue 的6，7倍。可见全世界范围 React 的用户是遥遥领先的

奶了一波 React 的好处，但是目前 React 的问题也是非常多：

- 文档并不是开发指导，且难于理解。虽然 React16 出来文档改版以后比之前好了许多。但是这真的不是一个 "用户使用说明书"，而像是前端哲学 Blog
- React 的设计太激进了。颠覆了传统前端开发的很多模式，其中需要理解大量的设计模式
- 在大型，复杂前端项目中，需要理解复杂的 Flux 架构，但是这个思想却与传统前端模式区别很大
- React 需要使用很多外部包，这些包都会带来新的概念，确实是一个很麻烦的事情
- 一群乱七八糟的状态(state, props)会令人苦恼
- 很多人不太习惯 JSX，但是我真的搞不懂他和他们喜欢的 Vue 或者 Angular 模版有什么区别
- React 的思想太激进了，需要具备一定的业务抽象能力(状态)，否则会非常苦恼。但是对于国内的大多数前端技术人员是没有这方面经验的
- React 不是渐进式的，相比较于 Vue 能够轻松的应用于老旧项目不同，React 虽然也可以用于老旧项目，但是个人认为开发体验非常的不友好
- 后端渲染相比传统开发有一定上手难度，虽然官方一直强调，这是值得的，因为你会在将来获利更多。但是以国内互联网开发现状。没人原意花费那个成本去研究，这也是 Angular 在中国互联网项目中使用很少的原因吧
- 后端渲染性能依然存在问题，查阅过许多文章。在 React 从组件渲染成页面性能一直不是很好。所以目前一般仅用于同构直出

_**Note**_: _*其实真的不必纠结那么多前端框架哪个好，哪个不好。他们都能解决前端问题，帮助我们快速落地需求。唯一的不同是不同的开发体验，喜欢哪种开发体验，就去学习好了*_

## 本站的主要内容

- 开始
  - 认识 React
  - 从 create-react-app 开始
  - React 的基本语法
  - Thinking in React
  - Flux
  - React Router(V4.0)
  - Redux
- 基础组件
  - Layout(布局)
  - Button(按钮)
  - Icon(图标)
- 表单组件
  - Form(表单)
  - Input(文本框)
  - Radio(单选框)
  - Checkbox(多选框)
  - Number(数字框)
  - Select(下拉框)
  - Switch(开关)
  - DateTimePicker(日期选择)
  - Updater(上传)
- 数据组件
  - Table(表格组件)
  - Pagination(分页组件)
  - Tree(树状组件)
- 通知组件
  - Alert(提示)
  - Loading(加载)
  - Message(消息)
- 其它组件
  - Dialog(对话框)
  - Tooltip(文字提示)
  - Tabs(标签)
  - Dropdown(下拉菜单)
`},
];
